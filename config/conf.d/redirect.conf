server {
    listen 80;

    server_name datastore.iatistandard.org;

    client_max_body_size 100M;

    set $base_api_uri "https://iati.cloud/search/";

    set $reporting_org '';
    set_by_lua_block $reporting_org {
        local parameter_value = ngx.req.get_uri_args()["reporting-org"]
        if parameter_value ~= nil then
            return "reporting_org_ref:(" .. string.gsub(parameter_value, "|", " ") .. ")"
        else
            return ""
        end
    }
    set $reporting_org_type '';
    set_by_lua_block $reporting_org_type {
        local parameter_value = ngx.req.get_uri_args()["reporting-org.type"]
        if parameter_value ~= nil then
            return "reporting_org_type:(" .. string.gsub(parameter_value, "|", " ") .. ")"
        else
            return ""
        end
    }
    set $recipient_country '';
    set_by_lua_block $recipient_country {
        local parameter_value = ngx.req.get_uri_args()["recipient-country"]
        if parameter_value ~= nil then
            return "recipient_country_code:(" .. string.gsub(parameter_value, "|", " ") .. ")"
        else
            return ""
        end
    }
    set $recipient_region '';
    set_by_lua_block $recipient_region {
        local parameter_value = ngx.req.get_uri_args()["recipient-region"]
        if parameter_value ~= nil then
            return "recipient_region_code:(" .. string.gsub(parameter_value, "|", " ") .. ")"
        else
            return ""
        end
    }
    set $start_date_lt '';
    set_by_lua_block $start_date_lt {
        local parameter_value = ngx.req.get_uri_args()["start-date__lt"]
        if parameter_value ~= nil then
            return "(activity_date_start_actual_f:[* TO " .. parameter_value .. "T00:00:00Z] OR (-activity_date_start_actual_f:[* TO *] AND activity_date_start_planned_f:[* TO " .. parameter_value .. "T00:00:00Z]))"
        else
            return ""
        end
    }
    set $start_date_gt '';
    set_by_lua_block $start_date_gt {
        local parameter_value = ngx.req.get_uri_args()["start-date__gt"]
        if parameter_value ~= nil then
            return "(activity_date_start_actual_f:[" .. parameter_value .. "T00:00:00Z TO *] OR  (-activity_date_start_actual_f:[* TO *] AND activity_date_start_planned_f:[" .. parameter_value .. "T00:00:00Z TO *]))"
        else
            return ""
        end
    }
    set $end_date_lt '';
    set_by_lua_block $end_date_lt {
        local parameter_value = ngx.req.get_uri_args()["end-date__lt"]
        if parameter_value ~= nil then
            return "(activity_date_end_actual_f:[* TO " .. parameter_value .. "T00:00:00Z] OR (-activity_date_end_actual_f: [* TO *] AND activity_date_end_planned_f:[* TO " .. parameter_value .. "T00:00:00Z]))"
        else
            return ""
        end
    }
    set $end_date_gt '';
    set_by_lua_block $end_date_gt {
        local parameter_value = ngx.req.get_uri_args()["end-date__gt"]
        if parameter_value ~= nil then
            return "(activity_date_end_actual_f:[" .. parameter_value .. "T00:00:00Z TO *] OR (-activity_date_end_actual_f:[* TO *] AND activity_date_end_planned_f:[" .. parameter_value .. "T00:00:00Z TO *]))"
        else
            return ""
        end
    }
    set $transaction_provider_org '';
    set_by_lua_block $transaction_provider_org {
        local parameter_value = ngx.req.get_uri_args()["transaction_provider-org"]
        if parameter_value ~= nil then
            return "transaction_provider_org_ref:(" .. string.gsub(parameter_value, "|", " ") .. ")"
        else
            return ""
        end
    }
    set $participating_org '';
    set_by_lua_block $participating_org {
        local parameter_value = ngx.req.get_uri_args()["participating-org"]
        if parameter_value ~= nil then
            return "participating_org_ref:(" .. string.gsub(parameter_value, "|", " ") .. ")"
        else
            return ""
        end
    }
    set $stream '';
    set_by_lua_block $stream {
        return ngx.req.get_uri_args()["stream"]
    }

    location /query {
        return 302 https://iatidatastore.iatistandard.org/querybuilder/core-filters;
    }

    location ~ ^/api/1/access/(?<rowtype>.*)/(?<bytype>.*)\.(?<format>.*) {
        set $suffix '';
        set_by_lua_block $suffix {
            if ngx.var.format == "csv" then
                return "&wt=xslt&tr=" .. ngx.var.rowtype .. "-csv.xsl&rows=5000000"
            elseif ngx.var.format == "json" then
                return "&wt=json&rows=5000000"
            else
                return "&wt=xslt&tr=" .. ngx.var.rowtype .. "-xml.xsl&rows=5000000"
            end
        }
        set $sector '';
        set_by_lua_block $sector {
            local parameter_value = ngx.req.get_uri_args()["sector"]
            if parameter_value ~= nil then
                if ngx.var.rowtype == "transaction" then
                    return "transaction_sector_code:(" .. string.gsub(parameter_value, "|", " ") .. ")"
                else
                    return "sector_code:(" .. string.gsub(parameter_value, "|", " ") .. ")"
                end
            else
                return ""
            end
        }
        set $datastore_query_string '';
        set_by_lua_block $datastore_query_string {
            local query_string_list = {}
            if ngx.var.reporting_org ~= "" then
              table.insert(query_string_list, ngx.var.reporting_org)
            end
            if ngx.var.reporting_org_type ~= "" then
              table.insert(query_string_list, ngx.var.reporting_org_type)
            end
            if ngx.var.sector ~= "" then
              table.insert(query_string_list, ngx.var.sector)
            end
            if ngx.var.recipient_country ~= "" then
              table.insert(query_string_list, ngx.var.recipient_country)
            end
            if ngx.var.recipient_region ~= "" then
              table.insert(query_string_list, ngx.var.recipient_region)
            end
            if ngx.var.start_date_lt ~= "" then
              table.insert(query_string_list, ngx.var.start_date_lt)
            end
            if ngx.var.start_date_gt ~= "" then
              table.insert(query_string_list, ngx.var.start_date_gt)
            end
            if ngx.var.end_date_lt ~= "" then
              table.insert(query_string_list, ngx.var.end_date_lt)
            end
            if ngx.var.end_date_gt ~= "" then
              table.insert(query_string_list, ngx.var.end_date_gt)
            end
            if ngx.var.transaction_provider_org ~= "" then
              table.insert(query_string_list, ngx.var.transaction_provider_org)
            end
            if ngx.var.participating_org ~= "" then
              table.insert(query_string_list, ngx.var.participating_org)
            end
            return "?q=" .. table.concat(query_string_list, " AND ")
        }
        return 200 "$base_api_uri$rowtype$datastore_query_string$suffix";
        add_header Content-Type text/plain;
    }

    location ~ ^/api/1/access/(?<rowtype>.*)\.(?<format>.*) {
        set $suffix '';
        set_by_lua_block $suffix {
            if ngx.var.format == "csv" then
                return "&wt=xslt&tr=" .. ngx.var.rowtype .. "-csv.xsl&rows=5000000"
            elseif ngx.var.format == "json" then
                return "&wt=json&rows=5000000"
            else
                return "&wt=xslt&tr=" .. ngx.var.rowtype .. "-xml.xsl&rows=5000000"
            end
        }
        set $sector '';
        set_by_lua_block $sector {
            local parameter_value = ngx.req.get_uri_args()["sector"]
            if parameter_value ~= nil then
                if ngx.var.rowtype == "transaction" then
                    return "transaction_sector_code:(" .. string.gsub(parameter_value, "|", " ") .. ")"
                else
                    return "sector_code:(" .. string.gsub(parameter_value, "|", " ") .. ")"
                end
            else
                return ""
            end
        }
        set $datastore_query_string '';
        set_by_lua_block $datastore_query_string {
            local query_string_list = {}
            if ngx.var.reporting_org ~= "" then
              table.insert(query_string_list, ngx.var.reporting_org)
            end
            if ngx.var.reporting_org_type ~= "" then
              table.insert(query_string_list, ngx.var.reporting_org_type)
            end
            if ngx.var.sector ~= "" then
              table.insert(query_string_list, ngx.var.sector)
            end
            if ngx.var.recipient_country ~= "" then
              table.insert(query_string_list, ngx.var.recipient_country)
            end
            if ngx.var.recipient_region ~= "" then
              table.insert(query_string_list, ngx.var.recipient_region)
            end
            if ngx.var.start_date_lt ~= "" then
              table.insert(query_string_list, ngx.var.start_date_lt)
            end
            if ngx.var.start_date_gt ~= "" then
              table.insert(query_string_list, ngx.var.start_date_gt)
            end
            if ngx.var.end_date_lt ~= "" then
              table.insert(query_string_list, ngx.var.end_date_lt)
            end
            if ngx.var.end_date_gt ~= "" then
              table.insert(query_string_list, ngx.var.end_date_gt)
            end
            if ngx.var.transaction_provider_org ~= "" then
              table.insert(query_string_list, ngx.var.transaction_provider_org)
            end
            if ngx.var.participating_org ~= "" then
              table.insert(query_string_list, ngx.var.participating_org)
            end
            return "?q=" .. table.concat(query_string_list, " AND ")
        }
        return 200 "$base_api_uri$rowtype$datastore_query_string$suffix";
        add_header Content-Type text/plain;
    }

    location / {
        return 302 https://iatidatastore.iatistandard.org/;
    }
}
